{"ast":null,"code":"var _jsxFileName = \"/home/aruzhan/Desktop/project/src/routes/softwEleven/softwElevenComponent.js\";\nimport React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nfunction softwElevenComponent() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }\n  }, \"Configuring Your Hardware\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }\n  }, \"Before You Begin...\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }\n  }, \"Before you can communicate with the motor, servo and sensors that are connected to the Control Hub or Expansion Hub, you first must create a configuration file on your Robot Controller, so that the Robot Controller will know what hardware is available on the Control Hub's or Expansion Hub's external ports.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 1\n    }\n  }, \"Connecting an Android Smartphone to an Expansion Hub\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 1\n    }\n  }, \"If you are using an Android smartphone as a Robot Controller, you must physically connect the Robot Controller smartphone to the Expansion Hub using a USB cable and an On-The-Go (OTG) adapter. Also, you should verify that the Driver Station is currently paired to the Robot Controller.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 1\n    }\n  }, \"1. Power on the Expansion Hub by turning on the power switch.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 1\n    }\n  }, \"2. Plug the Type B Mini end of the USB cable into the USB mini port on the Expansion Hub.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 1\n    }\n  }, \"3. Plug the Type A end of the USB cable into the OTG adapter.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 1\n    }\n  }, \"4. Verify that your Robot Controller smartphone is powered on and unlocked. Plug in the USB Micro OTG adapter into the OTG port of the Robot Controller phone.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 1\n    }\n  }, \"Note: that when the OTG adapter is plugged into the smartphone, the phone will detect the presence of the Expansion Hub and launch the Robot Controller app.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 1\n    }\n  }, \"5. The first time you connect the Robot Controller smartphone to the Expansion Hub, the Android operating system should prompt you to ask if it is OK to associate the newly detected USB device (which is the Expansion Hub) with the FTC Robot Controller app.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 1\n    }\n  }, \"Important Information!\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 1\n    }\n  }, \"You might be prompted multiple times to associate the USB hardware with the FTC Robot Controller. Whenever you are prompted by your phone with this message, you should always select the \\u201CUse by default for this USB device\\u201D option and hit the \\u201COK\\u201D button to associate the USB device with the FTC Robot Controller app.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 1\n    }\n  }, \"If you fail to make this association, then the Robot Controller app might not reliably connect to this Expansion Hub the next time you turn your system on.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 1\n    }\n  }, \"Getting the Control Hub Ready\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 1\n    }\n  }, \"If you are using a Control Hub, you do not need to make any additional connections. You simply need to make sure that the Control Hub is powered on and paired to the Driver Station.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 1\n    }\n  }, \"Creating a Configuration File Using the Driver Station\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 1\n    }\n  }, \"Although the configuration file needs to reside on the Robot Controller, for this tutorial we will use the Driver Station app to create the configuration file remotely. The Driver Station can be used to create a configuration file for a Control Hub or for an Android smartphone Robot Controller.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 1\n    }\n  }, \"1. Touch the three vertical dots in the upper right hand corner of the Driver Station app. This will launch a pop- up menu.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 1\n    }\n  }, \"2. Select Configure Robot from the pop up menu to display the Configuration screen.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 1\n    }\n  }, \"3. If your Robot Controller does not have any existing configuration files, the screen will display a message indicating that you need to create a file before proceeding.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 1\n    }\n  }, \"Hit the New button to create a new configuration file for your Robot Controller.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 1\n    }\n  }, \"4. When the new configuration screen appears, the Robot Controller app will do a scan of the serial bus to see what devices are connected to the Robot Controller.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 1\n    }\n  }, \"It will display the devices that it found in a list underneath the words \\u201CUSB Devices in configuration.\\u201D You should see an entry that says something like \\u201CExpansion Hub Portal 1\\u201D in the list.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 1\n    }\n  }, \"Your Expansion Hub is listed as a Portal because it is directly connected to the Robot Controller phone through the USB cable or in the case of the Control Hub through the internal serial bus.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 1\n    }\n  }, \"If you do not see your Expansion Hub Portal listed and you are using a smartphone as a Robot Controller, check the wired connections to make sure they are secure and then press the Scan button one or two times more to see if the smartphone detects the device on a re-scan of the USB bus.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 1\n    }\n  }, \"5. Touch the Portal listing (\\u201CExpansion Hub Portal 1\\u201D in this example) to display what Expansion Hubs are connected through this Portal.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 1\n    }\n  }, \"Since we only have a single Expansion Hub connected, we should only see a single Expansion Hub configured (\\u201CExpansion Hub 2\\u201D in this example).\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 1\n    }\n  }, \"6. Touch the Expansion Hub listing (\\u201CExpansion Hub 2\\u201D in this example) to display the Input/Output ports for that device.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 1\n    }\n  }, \"The screen should change and list all the motor, servo and sensor ports that are available on the selected Expansion Hub.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 1\n    }\n  }, \"Configuring a DC Motor\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 1\n    }\n  }, \"Now that you've created a file, you will need to add a DC Motor to the configuration file.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 1\n    }\n  }, \"Important Note: At this point, although you have created your configuration file, you have not yet saved its contents to the Robot Controller. You will save the configuration file in a later step.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 1\n    }\n  }, \"1. Touch the word Motors on the screen to display the Motor Configuration screen.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 1\n    }\n  }, \"2. Since we installed our motor onto port #0 of the Expansion Hub, use the dropdown control for port 0 to select the motor type (Tetrix Motor for this example).\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 1\n    }\n  }, \"3. Use the touch screen keypad to specify a name for your motor (\\u201CmotorTest\\u201D in this example).\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 1\n    }\n  }, \"4. Press the Done button to complete the motor configuration. The app should return to the previous screen.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 1\n    }\n  }, \"Configuring a Servo\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 1\n    }\n  }, \"You will also want to add a servo to the configuration file. In this example, you are using a standard 180- degree servo.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 1\n    }\n  }, \"1. Touch on the word Servos on the screen to display the Servo Configuration screen.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 1\n    }\n  }, \"2. Use the dropdown control to select \\u201CServo\\u201D as the servo type for port #0.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 1\n    }\n  }, \"3. Use the touch pad to specify the name of the servo (\\u201CservoTest\\u201D for this example) for port #0.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 1\n    }\n  }, \"4. Press the Done button to complete the servo configuration. The app should return to the previous screen.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 1\n    }\n  }, \"Configuring a Color Distance Sensor\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 1\n    }\n  }, \"The REV Robotics Color Distance Sensor is an I2C sensor. It actually combines two sensor functions into a single device. It is a color sensor, that can determine the color of an object. It is also a distance or range sensor, that can be used to measure short range distances. Note that in this tutorial, the word \\\"distance\\\" is used interchangeably with the word \\\"range\\\".\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 1\n    }\n  }, \"1. Touch the words I2C Bus 0 on the screen to launch the I2C configuration screen for this I2C bus.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 1\n    }\n  }, \"The Expansion Hub has four independent I2C buses, labeled \\u201C0\\u201D through \\u201C3\\u201D. In this example, since you connected the Color Sensor to the port labeled \\u201C0\\u201D, it resides on I2C Bus 0.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 1\n    }\n  }, \"2. Look at the I2C Bus 0 screen. There should already be a sensor configured for this bus. The Expansion Hub has its own built-in inertial measurement unit (IMU) sensor. This sensor can be used to determine the orientation of a robot, as well as measure the accelerations on a robot.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 1\n    }\n  }, \"The built-in IMU is internally connected to I2C Bus 0 on each Expansion Hub. Whenever you configure an Expansion Hub using the Robot Controller, the app automatically configures the IMU for I2C Bus 0. You will need to add another I2C device for this bus to be able to configure the color sensor.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 1\n    }\n  }, \"5. Press the Done button to complete the I2C sensor configuration. The app should return to the previous screen.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 1\n    }\n  }, \"Configuring a Digital Touch Sensor\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 1\n    }\n  }, \"The REV Robotics Touch Sensor is a digital sensor. An Op Mode can query the Touch Sensor to see if its button is being pressed or not.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 1\n    }\n  }, \"1. Touch the words Digital Devices on the screen to launch the Digital I/O configuration screen.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 1\n    }\n  }, \"2. Use the touch screen to add a \\u201CREV Touch Sensor\\u201D for port #1 and name the device \\u201CtestTouch\\u201D.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 1\n    }\n  }, \"Notice that we are configuring the Touch Sensor on port #1 instead of port #0. This is because when the REV Robotics Touch Sensor is connected to a digital port using a standard 4-wire JST sensor cable, it is the second digital pin that is connected. The first pin remains disconnected.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 1\n    }\n  }, \"3. Press the Done button to return to the previous screen.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 1\n    }\n  }, \"Saving the Configuration Information\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 1\n    }\n  }, \"Once you have configured your hardware, you must save the information to the configuration file. If you do not save this information, it will be lost and the robot controller will be unable to communicate with your hardware.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 1\n    }\n  }, \"1. Press the Done button to go up one level in the configuration screens.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 1\n    }\n  }, \"2. Press the Done button again to return to the highest level in the configuration screens.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 1\n    }\n  }, \"3. Press the Save button.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 1\n    }\n  }, \"4. When prompted, specify a configuration file name using the touchscreen\\u2019s keypad (use \\u201CTestConfig\\u201D for this example).\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 1\n    }\n  }, \"5. Press the OK button to save your configuration information using that file name.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 1\n    }\n  }, \"6. After the configuration file has been saved, touch the Android back-arrow button to return to the main screen of the app.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 1\n    }\n  }, \"7. Verify that the configuration file is the active configuration file on the main Driver Station screen.\"));\n}\n\nexport default softwElevenComponent;","map":{"version":3,"sources":["/home/aruzhan/Desktop/project/src/routes/softwEleven/softwElevenComponent.js"],"names":["React","softwElevenComponent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nfunction softwElevenComponent() {\n    return (\n        <div>\n            <h3>Configuring Your Hardware</h3>\n            <p>Before You Begin...</p>\n            <p>Before you can communicate with the motor, servo and sensors that are connected to the Control Hub or\nExpansion Hub, you first must create a configuration file on your Robot Controller, so that the Robot Controller\nwill know what hardware is available on the Control Hub's or Expansion Hub's external ports.</p>\n<p>Connecting an Android Smartphone to an Expansion Hub</p>\n<p>If you are using an Android smartphone as a Robot Controller, you must physically connect the Robot\nController smartphone to the Expansion Hub using a USB cable and an On-The-Go (OTG) adapter. Also, you\nshould verify that the Driver Station is currently paired to the Robot Controller.</p>\n<p>1. Power on the Expansion Hub by turning on the power switch.</p>\n<p>2. Plug the Type B Mini end of the USB cable into the USB mini port on the Expansion Hub.</p>\n<p>3. Plug the Type A end of the USB cable into the OTG adapter.</p>\n<p>4. Verify that your Robot Controller smartphone is powered on and unlocked. Plug in the USB Micro OTG\nadapter into the OTG port of the Robot Controller phone.</p>\n<p>Note: that when the OTG adapter is plugged into the smartphone, the phone will detect the presence of the\nExpansion Hub and launch the Robot Controller app.</p>\n<p>5. The first time you connect the Robot Controller smartphone to the Expansion Hub, the Android operating\nsystem should prompt you to ask if it is OK to associate the newly detected USB device (which is the Expansion\nHub) with the FTC Robot Controller app.</p>\n<p>Important Information!</p>\n<p>You might be prompted multiple times to associate the USB hardware with the FTC Robot Controller. Whenever\nyou are prompted by your phone with this message, you should always select the “Use by default for this USB\ndevice” option and hit the “OK” button to associate the USB device with the FTC Robot Controller app.</p>\n<p>If you fail to make this association, then the Robot Controller app might not reliably connect to this Expansion\nHub the next time you turn your system on.</p>\n<p>Getting the Control Hub Ready</p>\n<p>If you are using a Control Hub, you do not need to make any additional connections. You simply need to make\nsure that the Control Hub is powered on and paired to the Driver Station.</p>\n<p>Creating a Configuration File Using the Driver Station</p>\n<p>Although the configuration file needs to reside on the Robot Controller, for this tutorial we will use the Driver\nStation app to create the configuration file remotely. The Driver Station can be used to create a configuration\nfile for a Control Hub or for an Android smartphone Robot Controller.</p>\n<p>1. Touch the three vertical dots in the upper right hand corner of the Driver Station app. This will launch a pop-\nup menu.</p>\n<p>2. Select Configure Robot from the pop up menu to display the Configuration screen.</p>\n<p>3. If your Robot Controller does not have any existing configuration files, the screen will display a message\nindicating that you need to create a file before proceeding.</p>\n<p>Hit the New button to create a new configuration file for your Robot Controller.</p>\n<p>4. When the new configuration screen appears, the Robot Controller app will do a scan of the serial bus to see\nwhat devices are connected to the Robot Controller.</p>\n<p>It will display the devices that it found in a list underneath the words “USB Devices in configuration.” You should\nsee an entry that says something like “Expansion Hub Portal 1” in the list.</p>\n<p>Your Expansion Hub is listed as a Portal because it is directly connected to the Robot Controller phone through\nthe USB cable or in the case of the Control Hub through the internal serial bus.</p>\n<p>If you do not see your Expansion Hub Portal listed and you are using a smartphone as a Robot Controller,\ncheck the wired connections to make sure they are secure and then press the Scan button one or two times\nmore to see if the smartphone detects the device on a re-scan of the USB bus.</p>\n<p>5. Touch the Portal listing (“Expansion Hub Portal 1” in this example) to display what Expansion Hubs are\nconnected through this Portal.</p>\n<p>Since we only have a single Expansion Hub connected, we should only see a single Expansion Hub configured\n(“Expansion Hub 2” in this example).</p>\n<p>6. Touch the Expansion Hub listing (“Expansion Hub 2” in this example) to display the Input/Output ports for that\ndevice.</p>\n<p>The screen should change and list all the motor, servo and sensor ports that are available on the selected\nExpansion Hub.</p>\n<p>Configuring a DC Motor</p>\n<p>Now that you've created a file, you will need to add a DC Motor to the configuration file.</p>\n<p>Important Note: At this point, although you have created your configuration file, you have not yet\nsaved its contents to the Robot Controller. You will save the configuration file in a later step.</p>\n<p>1. Touch the word Motors on the screen to display the Motor Configuration screen.</p>\n<p>2. Since we installed our motor onto port #0 of the Expansion Hub, use the dropdown control for port 0 to select\nthe motor type (Tetrix Motor for this example).</p>\n<p>3. Use the touch screen keypad to specify a name for your motor (“motorTest” in this example).</p>\n<p>4. Press the Done button to complete the motor configuration. The app should return to the previous screen.</p>\n<p>Configuring a Servo</p>\n<p>You will also want to add a servo to the configuration file. In this example, you are using a standard 180-\ndegree servo.</p>\n<p>1. Touch on the word Servos on the screen to display the Servo Configuration screen.</p>\n<p>2. Use the dropdown control to select “Servo” as the servo type for port #0.</p>\n<p>3. Use the touch pad to specify the name of the servo (“servoTest” for this example) for port #0.</p>\n<p>4. Press the Done button to complete the servo configuration. The app should return to the previous screen.</p>\n<p>Configuring a Color Distance Sensor</p>\n<p>The REV Robotics Color Distance Sensor is an I2C sensor. It actually combines two sensor functions into a\nsingle device. It is a color sensor, that can determine the color of an object. It is also a distance or range\nsensor, that can be used to measure short range distances. Note that in this tutorial, the word \"distance\" is\nused interchangeably with the word \"range\".</p>\n<p>1. Touch the words I2C Bus 0 on the screen to launch the I2C configuration screen for this I2C bus.</p>\n<p>The Expansion Hub has four independent I2C buses, labeled “0” through “3”. In this example, since you\nconnected the Color Sensor to the port labeled “0”, it resides on I2C Bus 0.</p>\n<p>2. Look at the I2C Bus 0 screen. There should already be a sensor configured for this bus. The Expansion Hub\nhas its own built-in inertial measurement unit (IMU) sensor. This sensor can be used to determine the\norientation of a robot, as well as measure the accelerations on a robot.</p>\n<p>The built-in IMU is internally connected to I2C Bus 0 on each Expansion Hub. Whenever you configure an\nExpansion Hub using the Robot Controller, the app automatically configures the IMU for I2C Bus 0. You will\nneed to add another I2C device for this bus to be able to configure the color sensor.</p>\n<p>5. Press the Done button to complete the I2C sensor configuration. The app should return to the previous\nscreen.</p>\n<p>Configuring a Digital Touch Sensor</p>\n<p>The REV Robotics Touch Sensor is a digital sensor. An Op Mode can query the Touch Sensor to see if its\nbutton is being pressed or not.</p>\n<p>1. Touch the words Digital Devices on the screen to launch the Digital I/O configuration screen.</p>\n<p>2. Use the touch screen to add a “REV Touch Sensor” for port #1 and name the device “testTouch”.</p>\n<p>Notice that we are configuring the Touch Sensor on port #1 instead of port #0. This is because when the REV\nRobotics Touch Sensor is connected to a digital port using a standard 4-wire JST sensor cable, it is the second\ndigital pin that is connected. The first pin remains disconnected.</p>\n<p>3. Press the Done button to return to the previous screen.</p>\n<p>Saving the Configuration Information</p>\n<p>Once you have configured your hardware, you must save the information to the configuration file. If you do not\nsave this information, it will be lost and the robot controller will be unable to communicate with your hardware.</p>\n<p>1. Press the Done button to go up one level in the configuration screens.</p>\n<p>2. Press the Done button again to return to the highest level in the configuration screens.</p>\n<p>3. Press the Save button.</p>\n<p>4. When prompted, specify a configuration file name using the touchscreen’s keypad (use “TestConfig” for this\nexample).</p>\n<p>5. Press the OK button to save your configuration information using that file name.</p>\n<p>6. After the configuration file has been saved, touch the Android back-arrow button to return to the main screen\nof the app.</p>\n<p>7. Verify that the configuration file is the active configuration file on the main Driver Station screen.</p>\n            \n            \n            \n           \n        </div>\n    );\n}\n\nexport default softwElevenComponent;\n"]},"metadata":{},"sourceType":"module"}