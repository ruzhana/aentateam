"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SectionConsumer = (0, _utils.Consumer)(_utils.SectionContext);

var Flag = function (_Component) {
  _inherits(Flag, _Component);

  function Flag() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Flag);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Flag.__proto__ || Object.getPrototypeOf(Flag)).call.apply(_ref, [this].concat(args))), _this), _this.state = { Component: null, isLoaded: false }, _this.node = _react2.default.createRef(), _this.onScroll = function () {
      if (_this.props.lazyLoad) {
        var _this$props$lazyLoad = _this.props.lazyLoad,
            loadOnView = _this$props$lazyLoad.loadOnView,
            _this$props$lazyLoad$ = _this$props$lazyLoad.delay,
            delay = _this$props$lazyLoad$ === undefined ? 0 : _this$props$lazyLoad$,
            loaded = _this$props$lazyLoad.loaded,
            _this$props$lazyLoad$2 = _this$props$lazyLoad.fromBottom,
            fromBottom = _this$props$lazyLoad$2 === undefined ? 0 : _this$props$lazyLoad$2;

        if (loadOnView) {
          // If loadOnView provided then apply scroll
          // that trigger import when comp is in viewport +  fromBottom
          var _this$node$current$ge = _this.node.current.getBoundingClientRect(),
              top = _this$node$current$ge.top;

          _objectDestructuringEmpty(_this.props.lazyLoad);

          if (top - window.innerHeight + fromBottom < 0) {
            (0, _utils.loadLazyComponent)(loaded).then(function (res) {
              setTimeout(function () {
                _this.setState({
                  Component: res,
                  isLoaded: true
                });
              }, delay);
              window.removeEventListener("scroll", _this.onScroll);
            });
          }
        }
      }
    }, _this.check = function () {
      // Warn user if provide children when provided lazyload
      var _this$props = _this.props,
          children = _this$props.children,
          _this$props$lazyLoad2 = _this$props.lazyLoad,
          lazyLoad = _this$props$lazyLoad2 === undefined ? {} : _this$props$lazyLoad2;

      var lazy = Object.keys(lazyLoad).length !== 0;
      if (lazy && children) {
        throw new Error("Children will not be render if lazyLoad props is provided");
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Flag, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      if (this.props.lazyLoad) {
        // If is lazyload add onScroll listener
        window.addEventListener("scroll", this.onScroll);
        var _props$lazyLoad$loadi = this.props.lazyLoad.loading,
            loading = _props$lazyLoad$loadi === undefined ? null : _props$lazyLoad$loadi;

        this.setState({
          Component: loading
        });
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      if (this.props.lazyLoad) {
        var _props$lazyLoad = this.props.lazyLoad,
            _props$lazyLoad$delay = _props$lazyLoad.delay,
            delay = _props$lazyLoad$delay === undefined ? 0 : _props$lazyLoad$delay,
            loaded = _props$lazyLoad.loaded,
            loadOnView = _props$lazyLoad.loadOnView;
        // Load component if loadOnVIew is not provided

        if (!loadOnView) {
          (0, _utils.loadLazyComponent)(loaded).then(function (res) {
            setTimeout(function () {
              _this2.setState({
                Component: res,
                isLoaded: true
              });
            }, delay);
            // Remove listner
            window.removeEventListener("scroll", _this2.onScroll);
          });
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener("scroll", this.onScroll);
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      this.check();

      var _props = this.props,
          children = _props.children,
          flagName = _props.flagName,
          _props$lazyLoad2 = _props.lazyLoad,
          lazyLoad = _props$lazyLoad2 === undefined ? {} : _props$lazyLoad2,
          rest = _objectWithoutProperties(_props, ["children", "flagName", "lazyLoad"]);

      var _state = this.state,
          Component = _state.Component,
          isLoaded = _state.isLoaded;

      var lazy = Object.keys(lazyLoad).length !== 0;
      var props = rest;
      // Check if component is lazy load
      if (lazy) {
        // Then apply provided initProps
        // If lazy comp is loaded apply rest props not initProps
        props = !isLoaded ? lazyLoad.initProps : rest;
      }
      // If is lazy then render from lazyload comp else render children
      var ui = !lazy ? children : _react2.default.createElement(Component, lazyLoad.loadedProps);

      return _react2.default.createElement(
        SectionConsumer,
        null,
        function (value) {
          value.onRef(_this3);
          return _react2.default.createElement(
            "div",
            _extends({}, props, { ref: _this3.node }),
            ui
          );
        }
      );
    }
  }]);

  return Flag;
}(_react.Component);

Flag.propTypes = {
  lazyLoad: _propTypes2.default.shape({
    delay: _propTypes2.default.number,
    loading: _propTypes2.default.func,
    loaded: _propTypes2.default.func.isRequired,
    loadOnView: _propTypes2.default.bool,
    initProps: _propTypes2.default.object,
    preClassName: _propTypes2.default.string
  }),
  flagName: _propTypes2.default.string.isRequired,
  className: _propTypes2.default.string
};
exports.default = Flag;