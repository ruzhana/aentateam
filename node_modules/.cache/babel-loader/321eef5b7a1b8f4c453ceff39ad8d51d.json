{"ast":null,"code":"var _jsxFileName = \"/home/aruzhan/Desktop/project/src/hooks/useSidebar.js\";\nimport React, { useState, useEffect, useContext, createContext } from 'react';\nexport const SidebarContext = createContext();\nexport function SidebarProvider({\n  children,\n  defaultItem\n}) {\n  const [currentItem, setCurrentItem] = useState(defaultItem);\n  useEffect(() => {\n    if (defaultItem !== currentItem) {\n      return setCurrentItem(defaultItem);\n    }\n  }, [currentItem, defaultItem]);\n  return /*#__PURE__*/React.createElement(SidebarContext.Provider, {\n    value: {\n      currentItem,\n      setCurrentItem\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, children);\n}\nexport const useSidebar = ({\n  isCollapsible,\n  item,\n  items = []\n} = {}) => {\n  const {\n    currentItem,\n    setCurrentItem\n  } = useContext(SidebarContext);\n  const isActive = item === currentItem || items.includes(currentItem);\n  const [isExpanded, setIsExpanded] = useState(isActive);\n  useEffect(() => {\n    if (!isActive && isExpanded) {\n      return setIsExpanded(false);\n    }\n\n    if (isActive && !isExpanded) {\n      return setIsExpanded(true);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [currentItem]);\n\n  const onItemClick = () => {\n    if (!isCollapsible) {\n      setCurrentItem(item);\n    }\n\n    setIsExpanded(prev => !prev);\n  };\n\n  return {\n    isExpanded,\n    isActive,\n    onItemClick\n  };\n};","map":{"version":3,"sources":["/home/aruzhan/Desktop/project/src/hooks/useSidebar.js"],"names":["React","useState","useEffect","useContext","createContext","SidebarContext","SidebarProvider","children","defaultItem","currentItem","setCurrentItem","useSidebar","isCollapsible","item","items","isActive","includes","isExpanded","setIsExpanded","onItemClick","prev"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,EAAiDC,aAAjD,QAAsE,OAAtE;AAEA,OAAO,MAAMC,cAAc,GAAGD,aAAa,EAApC;AAEP,OAAO,SAASE,eAAT,CAAyB;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAzB,EAAoD;AACvD,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAACO,WAAD,CAA9C;AACAN,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIM,WAAW,KAAKC,WAApB,EAAiC;AAC7B,aAAOC,cAAc,CAACF,WAAD,CAArB;AACH;AACJ,GAJQ,EAIN,CAACC,WAAD,EAAcD,WAAd,CAJM,CAAT;AAKA,sBACI,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKH,QADL,CADJ;AAKH;AAED,OAAO,MAAMI,UAAU,GAAG,CAAC;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,IAAjB;AAAuBC,EAAAA,KAAK,GAAG;AAA/B,IAAsC,EAAvC,KAA8C;AACpE,QAAM;AAAEL,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAkCP,UAAU,CAACE,cAAD,CAAlD;AACA,QAAMU,QAAQ,GAAGF,IAAI,KAAKJ,WAAT,IAAwBK,KAAK,CAACE,QAAN,CAAeP,WAAf,CAAzC;AACA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAACc,QAAD,CAA5C;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACa,QAAD,IAAaE,UAAjB,EAA6B;AACzB,aAAOC,aAAa,CAAC,KAAD,CAApB;AACH;;AACD,QAAIH,QAAQ,IAAI,CAACE,UAAjB,EAA6B;AACzB,aAAOC,aAAa,CAAC,IAAD,CAApB;AACH,KANW,CAOZ;;AACH,GARQ,EAQN,CAACT,WAAD,CARM,CAAT;;AAUA,QAAMU,WAAW,GAAG,MAAM;AACtB,QAAI,CAACP,aAAL,EAAoB;AAChBF,MAAAA,cAAc,CAACG,IAAD,CAAd;AACH;;AACDK,IAAAA,aAAa,CAAEE,IAAD,IAAU,CAACA,IAAZ,CAAb;AACH,GALD;;AAOA,SAAO;AACHH,IAAAA,UADG;AAEHF,IAAAA,QAFG;AAGHI,IAAAA;AAHG,GAAP;AAKH,CA3BM","sourcesContent":["import React, { useState, useEffect, useContext, createContext } from 'react';\n\nexport const SidebarContext = createContext();\n\nexport function SidebarProvider({ children, defaultItem }) {\n    const [currentItem, setCurrentItem] = useState(defaultItem);\n    useEffect(() => {\n        if (defaultItem !== currentItem) {\n            return setCurrentItem(defaultItem);\n        }\n    }, [currentItem, defaultItem]);\n    return (\n        <SidebarContext.Provider value={{ currentItem, setCurrentItem }}>\n            {children}\n        </SidebarContext.Provider>\n    );\n}\n\nexport const useSidebar = ({ isCollapsible, item, items = [] } = {}) => {\n    const { currentItem, setCurrentItem } = useContext(SidebarContext);\n    const isActive = item === currentItem || items.includes(currentItem);\n    const [isExpanded, setIsExpanded] = useState(isActive);\n\n    useEffect(() => {\n        if (!isActive && isExpanded) {\n            return setIsExpanded(false);\n        }\n        if (isActive && !isExpanded) {\n            return setIsExpanded(true);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [currentItem]);\n\n    const onItemClick = () => {\n        if (!isCollapsible) {\n            setCurrentItem(item);\n        }\n        setIsExpanded((prev) => !prev);\n    };\n\n    return {\n        isExpanded,\n        isActive,\n        onItemClick\n    };\n};\n"]},"metadata":{},"sourceType":"module"}