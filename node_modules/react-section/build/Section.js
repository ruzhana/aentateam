"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Section = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _Flag = require("./Flag");

var _Flag2 = _interopRequireDefault(_Flag);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Section = exports.Section = function (_Component) {
  _inherits(Section, _Component);

  function Section() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Section);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Section.__proto__ || Object.getPrototypeOf(Section)).call.apply(_ref, [this].concat(args))), _this), _this.flagsNode = {}, _this.flagsRef = {}, _this.getFlagsPosition = function () {
      if (Object.keys(_this.flagsNode).length === 0) return {};
      var result = {};
      Object.keys(_this.flagsNode).forEach(function (ele) {
        result[ele] = _this.flagsNode[ele].node.getBoundingClientRect();
      });
      return result;
    }, _this.getFlagsOffSet = function () {
      if (Object.keys(_this.flagsNode).length === 0) return {};
      var result = {};
      Object.keys(_this.flagsNode).forEach(function (ele) {
        result[ele] = {
          offsetHeight: _this.flagsNode[ele].node.offsetHeight,
          offsetLeft: _this.flagsNode[ele].node.offsetLeft,
          offsetTop: _this.flagsNode[ele].node.offsetTop,
          offsetWidth: _this.flagsNode[ele].node.offsetWidth
        };
      });
      return result;
    }, _this.scrollToFlag = function (flag) {
      var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var duration = arguments[2];

      try {
        (0, _utils.onAnimatedScroll)(_this.getFlagsOffSet()[flag].offsetTop - top, duration);
        return;
      } catch (error) {
        return null;
      }
    }, _this.inViewFlag = function (props) {
      var ignoreFlag = [];
      var offSetTop = 0;
      if (props && props.ignore) {
        ignoreFlag = props.ignore.split(" ");
      }
      if (props && props.offSetTop) {
        offSetTop = props.offSetTop;
      }
      var flags = _this.getFlagsPosition();
      var filtered = Object.keys(flags).filter(function (key) {
        return !ignoreFlag.includes(key);
      }).reduce(function (obj, key) {
        obj[key] = flags[key];
        return obj;
      }, {});

      var flagTop = Object.values(filtered).map(function (ele, index) {
        return ele.top;
      });
      var neg = flagTop.filter(function (ele) {
        return ele - offSetTop < 0;
      });
      if (neg.length === 0) {
        var indexOfMin = flagTop.indexOf(Math.min.apply(Math, _toConsumableArray(flagTop)));
        return Object.keys(filtered).find(function (ele, index) {
          return index === indexOfMin;
        });
      }
      if (neg.length === flagTop.length) {
        var indexOfMax = flagTop.indexOf(Math.max.apply(Math, _toConsumableArray(flagTop)));
        return Object.keys(filtered).find(function (ele, index) {
          return index === indexOfMax;
        });
      } else {
        var _indexOfMax = neg.indexOf(Math.max.apply(Math, _toConsumableArray(neg)));
        return Object.keys(filtered).find(function (ele, index) {
          return index === _indexOfMax;
        });
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Section, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      if (!this.props.onRef) {
        throw new Error("<Section onRef={ref => (this.section = ref)}/>\n                            ^\n                            onRef must be provided\n        ");
      }
      if (this.props.onRef) {
        this.props.onRef(this);
        Object.keys(this.flagsRef).forEach(function (ele, index) {
          _this2.flagsNode[ele] = {
            node: _this2.flagsRef[ele].node.current
          };
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.props.onRef) {
        this.props.onRef(undefined);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      return _react2.default.createElement(
        _utils.SectionContext.Provider,
        {
          value: {
            onRef: function onRef(node) {
              if (node.props.flagName === undefined) {
                throw new Error("Flag is missing flagName props");
              }
              _this3.flagsRef[node.props.flagName] = node;
            }
          }
        },
        this.props.children
      );
    }
  }]);

  return Section;
}(_react.Component);

Section.Flag = _Flag2.default;
Section.propTypes = {
  onRef: _propTypes2.default.func.isRequired
};
exports.default = Section;